import numpy as np

class Vehicule:
    """Classe qui g√®re la physique et le mouvement du v√©hicule."""

    def __init__(self, vit_max: int, acc: float, champ: list, position: list):
        """
        Initialise le v√©hicule.
        """
        self.speed = 0  # D√©marre √† l'arr√™t
        self.max_speed = vit_max  # Vitesse max
        self.acceleration = acc  # Acc√©l√©ration progressive
        self.deceleration = 0.1  # D√©c√©l√©ration naturelle
        self.friction = 0.05  # Perte de vitesse sur la boue
        self.vision = champ
        self.position = [position[0], position[1]]
        self.orientation = 0  # üî• On part avec une orientation √† 0 (vers la droite)
        self.maniability = np.pi / 20  # Plus faible pour √©viter trop de virages brusques

    def accelerate(self):
        """Augmente progressivement la vitesse."""
        if self.speed < self.max_speed:
            self.speed += self.acceleration

    def decelerate(self):
        """Diminue la vitesse quand on l√¢che l'acc√©l√©rateur."""
        if self.speed > 0:
            self.speed -= self.deceleration
        if self.speed < 0:
            self.speed = 0

    def apply_friction(self):
        """Applique un ralentissement si le v√©hicule est hors route."""
        if self.speed > 0:
            self.speed -= self.friction

    def setMoveAway(self):
        """D√©place le v√©hicule selon sa vitesse et son orientation."""
        self.position[0] += self.speed * np.cos(self.orientation)
        self.position[1] += self.speed * np.sin(self.orientation)

    def setChamp(self, direction: str):
        """Modifie l'orientation du v√©hicule."""
        if direction == 'right':
            self.orientation += self.maniability
        elif direction == 'left':
            self.orientation -= self.maniability

    def getPosition(self):
        return self.position

    def getOrientation(self):
        return self.orientation
